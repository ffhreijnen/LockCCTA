group button1:
  uncontrollable u_push;
  uncontrollable u_release;
end
group button2:
  uncontrollable u_push;
  uncontrollable u_release;
end
group button3:
  uncontrollable u_push;
  uncontrollable u_release;
end
group button4:
  uncontrollable u_push;
  uncontrollable u_release;
end
group button5:
  uncontrollable u_push;
  uncontrollable u_release;
end
group button6:
  uncontrollable u_push;
  uncontrollable u_release;
end
group button7:
  uncontrollable u_push;
  uncontrollable u_release;
end
group button8:
  uncontrollable u_push;
  uncontrollable u_release;
end
group button9:
  uncontrollable u_push;
  uncontrollable u_release;
end
group button10:
  uncontrollable u_push;
  uncontrollable u_release;
end
group button11:
  uncontrollable u_push;
  uncontrollable u_release;
end
group button12:
  uncontrollable u_push;
  uncontrollable u_release;
end
group button13:
  uncontrollable u_push;
  uncontrollable u_release;
end
group button14:
  uncontrollable u_push;
  uncontrollable u_release;
end
group button15:
  uncontrollable u_push;
  uncontrollable u_release;
end
group button16:
  uncontrollable u_push;
  uncontrollable u_release;
end
group button17:
  uncontrollable u_push;
  uncontrollable u_release;
end
group button18:
  uncontrollable u_push;
  uncontrollable u_release;
end
group button19:
  uncontrollable u_push;
  uncontrollable u_release;
end
group button20:
  uncontrollable u_push;
  uncontrollable u_release;
end
group emergencystop:
  uncontrollable u_push;
  uncontrollable u_release;
end
group stop1:
  uncontrollable u_push;
  uncontrollable u_release;
end
group stop2:
  uncontrollable u_push;
  uncontrollable u_release;
end
group stop3:
  uncontrollable u_push;
  uncontrollable u_release;
end
group stop4:
  uncontrollable u_push;
  uncontrollable u_release;
end
group pad_N:
  controllable c_open;
  controllable c_close;
  controllable c_stop;
  group S1:
    uncontrollable u_closed_on;
    uncontrollable u_closed_off;
    uncontrollable u_open_on;
    uncontrollable u_open_off;
  end
  group S2:
    uncontrollable u_closed_on;
    uncontrollable u_closed_off;
    uncontrollable u_open_on;
    uncontrollable u_open_off;
  end
  group S3:
    uncontrollable u_closed_on;
    uncontrollable u_closed_off;
    uncontrollable u_open_on;
    uncontrollable u_open_off;
  end
end
group pad_S:
  controllable c_open;
  controllable c_close;
  controllable c_stop;
  group S1:
    uncontrollable u_closed_on;
    uncontrollable u_closed_off;
    uncontrollable u_open_on;
    uncontrollable u_open_off;
  end
  group S2:
    uncontrollable u_closed_on;
    uncontrollable u_closed_off;
    uncontrollable u_open_on;
    uncontrollable u_open_off;
  end
  group S3:
    uncontrollable u_closed_on;
    uncontrollable u_closed_off;
    uncontrollable u_open_on;
    uncontrollable u_open_off;
  end
end
group culvert_N:
  controllable c_enable;
  controllable c_disable;
  uncontrollable u_on;
  uncontrollable u_off;
end
group culvert_S:
  controllable c_enable;
  controllable c_disable;
  uncontrollable u_on;
  uncontrollable u_off;
end
group gate_D_N:
  controllable c_high_on;
  controllable c_high_off;
  controllable c_low_on;
  controllable c_low_off;
  controllable c_open;
  controllable c_close;
  controllable c_stop;
  controllable c_fc_off;
  controllable c_fc_on;
  controllable c_sc_on;
  controllable c_sc_off;
  controllable c_fo_off;
  controllable c_fo_on;
  controllable c_so_on;
  controllable c_so_off;
  uncontrollable u_s1_on;
  uncontrollable u_s1_off;
  uncontrollable u_s2_on;
  uncontrollable u_s2_off;
  uncontrollable u_s3_on;
  uncontrollable u_s3_off;
  uncontrollable u_s4_on;
  uncontrollable u_s4_off;
  uncontrollable u_s5_on;
  uncontrollable u_s5_off;
  uncontrollable u_s6_on;
  uncontrollable u_s6_off;
end
group gate_D_S:
  controllable c_high_on;
  controllable c_high_off;
  controllable c_low_on;
  controllable c_low_off;
  controllable c_open;
  controllable c_close;
  controllable c_stop;
  controllable c_fc_off;
  controllable c_fc_on;
  controllable c_sc_on;
  controllable c_sc_off;
  controllable c_fo_off;
  controllable c_fo_on;
  controllable c_so_on;
  controllable c_so_off;
  uncontrollable u_s1_on;
  uncontrollable u_s1_off;
  uncontrollable u_s2_on;
  uncontrollable u_s2_off;
  uncontrollable u_s3_on;
  uncontrollable u_s3_off;
  uncontrollable u_s4_on;
  uncontrollable u_s4_off;
  uncontrollable u_s5_on;
  uncontrollable u_s5_off;
  uncontrollable u_s6_on;
  uncontrollable u_s6_off;
end
group gate_U_N:
  controllable c_high_on;
  controllable c_high_off;
  controllable c_low_on;
  controllable c_low_off;
  controllable c_open;
  controllable c_close;
  controllable c_stop;
  controllable c_fc_off;
  controllable c_fc_on;
  controllable c_sc_on;
  controllable c_sc_off;
  controllable c_fo_off;
  controllable c_fo_on;
  controllable c_so_on;
  controllable c_so_off;
  uncontrollable u_s1_on;
  uncontrollable u_s1_off;
  uncontrollable u_s2_on;
  uncontrollable u_s2_off;
  uncontrollable u_s3_on;
  uncontrollable u_s3_off;
  uncontrollable u_s4_on;
  uncontrollable u_s4_off;
  uncontrollable u_s5_on;
  uncontrollable u_s5_off;
  uncontrollable u_s6_on;
  uncontrollable u_s6_off;
end
group gate_U_S:
  controllable c_high_on;
  controllable c_high_off;
  controllable c_low_on;
  controllable c_low_off;
  controllable c_open;
  controllable c_close;
  controllable c_stop;
  controllable c_fc_off;
  controllable c_fc_on;
  controllable c_sc_on;
  controllable c_sc_off;
  controllable c_fo_off;
  controllable c_fo_on;
  controllable c_so_on;
  controllable c_so_off;
  uncontrollable u_s1_on;
  uncontrollable u_s1_off;
  uncontrollable u_s2_on;
  uncontrollable u_s2_off;
  uncontrollable u_s3_on;
  uncontrollable u_s3_off;
  uncontrollable u_s4_on;
  uncontrollable u_s4_off;
  uncontrollable u_s5_on;
  uncontrollable u_s5_off;
  uncontrollable u_s6_on;
  uncontrollable u_s6_off;
end
group s_equal_D:
  uncontrollable u_equal_on;
  uncontrollable u_equal_off;
end
group s_equal_U:
  uncontrollable u_equal_on;
  uncontrollable u_equal_off;
end
group out_D_N:
  controllable c_red;
  controllable c_green;
  uncontrollable u_r_on;
  uncontrollable u_r_off;
  uncontrollable u_g_on;
  uncontrollable u_g_off;
end
group out_D_S:
  controllable c_red;
  controllable c_green;
  uncontrollable u_r_on;
  uncontrollable u_r_off;
  uncontrollable u_g_on;
  uncontrollable u_g_off;
end
group out_U_N:
  controllable c_red;
  controllable c_green;
  uncontrollable u_r_on;
  uncontrollable u_r_off;
  uncontrollable u_g_on;
  uncontrollable u_g_off;
end
group out_U_S:
  controllable c_red;
  controllable c_green;
  uncontrollable u_r_on;
  uncontrollable u_r_off;
  uncontrollable u_g_on;
  uncontrollable u_g_off;
end
group in_D_N:
  controllable c_red;
  controllable c_green;
  controllable c_redgreen;
  controllable c_redred;
  uncontrollable u_r_on;
  uncontrollable u_r_off;
  uncontrollable u_g_on;
  uncontrollable u_g_off;
  uncontrollable u_s_on;
  uncontrollable u_s_off;
end
group in_D_S:
  controllable c_red;
  controllable c_green;
  controllable c_redgreen;
  controllable c_redred;
  uncontrollable u_r_on;
  uncontrollable u_r_off;
  uncontrollable u_g_on;
  uncontrollable u_g_off;
  uncontrollable u_s_on;
  uncontrollable u_s_off;
end
group in_U_N:
  controllable c_red;
  controllable c_green;
  controllable c_redgreen;
  controllable c_redred;
  uncontrollable u_r_on;
  uncontrollable u_r_off;
  uncontrollable u_g_on;
  uncontrollable u_g_off;
  uncontrollable u_s_on;
  uncontrollable u_s_off;
end
group in_U_S:
  controllable c_red;
  controllable c_green;
  controllable c_redgreen;
  controllable c_redred;
  uncontrollable u_r_on;
  uncontrollable u_r_off;
  uncontrollable u_g_on;
  uncontrollable u_g_off;
  uncontrollable u_s_on;
  uncontrollable u_s_off;
end
group sup:
  alg bool cmd_stop = emergencystop.pushed or stop1.pushed or stop2.pushed or stop3.pushed or stop4.pushed;
  alg bool cmd_stop_culvert = emergencystop.pushed or stop3.pushed;
  alg bool cmd_stop_pad = emergencystop.pushed or stop4.pushed;
  alg bool cmd_stop_D_gate = emergencystop.pushed or stop1.pushed;
  alg bool cmd_stop_U_gate = emergencystop.pushed or stop2.pushed;
  alg bool cmd_D_in_g = button14.pushed and not button10.pushed and not button17.pushed;
  alg bool cmd_D_in_rg = button17.pushed and not button10.pushed;
  alg bool cmd_D_in_r = button10.pushed;
  alg bool cmd_D_in_rr = button18.pushed and not button10.pushed;
  alg bool cmd_D_out_g = button13.pushed and not button9.pushed;
  alg bool cmd_D_out_r = button9.pushed;
  alg bool cmd_pad_o = button1.pushed and not button2.pushed;
  alg bool cmd_pad_c = button2.pushed;
  alg bool cmd_D_gate_o = button5.pushed and not button6.pushed;
  alg bool cmd_D_gate_c = button6.pushed;
  alg bool cmd_U_in_g = button16.pushed and not button12.pushed and not button19.pushed;
  alg bool cmd_U_in_rg = button19.pushed and not button12.pushed;
  alg bool cmd_U_in_r = button12.pushed;
  alg bool cmd_U_in_rr = button20.pushed and not button12.pushed;
  alg bool cmd_U_out_g = button15.pushed and not button11.pushed;
  alg bool cmd_U_out_r = button11.pushed;
  alg bool cmd_culvert_o = button3.pushed and not button4.pushed;
  alg bool cmd_culvert_c = button4.pushed;
  alg bool cmd_U_gate_o = button7.pushed and not button8.pushed;
  alg bool cmd_U_gate_c = button8.pushed;
  plant automaton button1:
    location released:
      initial;
      marked;
      edge .button1.u_push goto pushed;
    location pushed:
      edge .button1.u_release goto released;
  end
  plant automaton button2:
    location released:
      initial;
      marked;
      edge .button2.u_push goto pushed;
    location pushed:
      edge .button2.u_release goto released;
  end
  plant automaton button3:
    location released:
      initial;
      marked;
      edge .button3.u_push goto pushed;
    location pushed:
      edge .button3.u_release goto released;
  end
  plant automaton button4:
    location released:
      initial;
      marked;
      edge .button4.u_push goto pushed;
    location pushed:
      edge .button4.u_release goto released;
  end
  plant automaton button5:
    location released:
      initial;
      marked;
      edge .button5.u_push goto pushed;
    location pushed:
      edge .button5.u_release goto released;
  end
  plant automaton button6:
    location released:
      initial;
      marked;
      edge .button6.u_push goto pushed;
    location pushed:
      edge .button6.u_release goto released;
  end
  plant automaton button7:
    location released:
      initial;
      marked;
      edge .button7.u_push goto pushed;
    location pushed:
      edge .button7.u_release goto released;
  end
  plant automaton button8:
    location released:
      initial;
      marked;
      edge .button8.u_push goto pushed;
    location pushed:
      edge .button8.u_release goto released;
  end
  plant automaton button9:
    location released:
      initial;
      marked;
      edge .button9.u_push goto pushed;
    location pushed:
      edge .button9.u_release goto released;
  end
  plant automaton button10:
    location released:
      initial;
      marked;
      edge .button10.u_push goto pushed;
    location pushed:
      edge .button10.u_release goto released;
  end
  plant automaton button11:
    location released:
      initial;
      marked;
      edge .button11.u_push goto pushed;
    location pushed:
      edge .button11.u_release goto released;
  end
  plant automaton button12:
    location released:
      initial;
      marked;
      edge .button12.u_push goto pushed;
    location pushed:
      edge .button12.u_release goto released;
  end
  plant automaton button13:
    location released:
      initial;
      marked;
      edge .button13.u_push goto pushed;
    location pushed:
      edge .button13.u_release goto released;
  end
  plant automaton button14:
    location released:
      initial;
      marked;
      edge .button14.u_push goto pushed;
    location pushed:
      edge .button14.u_release goto released;
  end
  plant automaton button15:
    location released:
      initial;
      marked;
      edge .button15.u_push goto pushed;
    location pushed:
      edge .button15.u_release goto released;
  end
  plant automaton button16:
    location released:
      initial;
      marked;
      edge .button16.u_push goto pushed;
    location pushed:
      edge .button16.u_release goto released;
  end
  plant automaton button17:
    location released:
      initial;
      marked;
      edge .button17.u_push goto pushed;
    location pushed:
      edge .button17.u_release goto released;
  end
  plant automaton button18:
    location released:
      initial;
      marked;
      edge .button18.u_push goto pushed;
    location pushed:
      edge .button18.u_release goto released;
  end
  plant automaton button19:
    location released:
      initial;
      marked;
      edge .button19.u_push goto pushed;
    location pushed:
      edge .button19.u_release goto released;
  end
  plant automaton button20:
    location released:
      initial;
      marked;
      edge .button20.u_push goto pushed;
    location pushed:
      edge .button20.u_release goto released;
  end
  plant automaton emergencystop:
    location released:
      initial;
      marked;
      edge .emergencystop.u_push goto pushed;
    location pushed:
      edge .emergencystop.u_release goto released;
  end
  plant automaton stop1:
    location released:
      initial;
      marked;
      edge .stop1.u_push goto pushed;
    location pushed:
      edge .stop1.u_release goto released;
  end
  plant automaton stop2:
    location released:
      initial;
      marked;
      edge .stop2.u_push goto pushed;
    location pushed:
      edge .stop2.u_release goto released;
  end
  plant automaton stop3:
    location released:
      initial;
      marked;
      edge .stop3.u_push goto pushed;
    location pushed:
      edge .stop3.u_release goto released;
  end
  plant automaton stop4:
    location released:
      initial;
      marked;
      edge .stop4.u_push goto pushed;
    location pushed:
      edge .stop4.u_release goto released;
  end
  group pad_N:
    plant automaton A:
      location rest:
        initial;
        marked;
        edge .pad_N.c_open goto opening;
        edge .pad_N.c_close goto closing;
      location opening:
        edge .pad_N.c_close goto closing;
        edge .pad_N.c_stop goto rest;
        edge .pad_N.S1.u_closed_off, .pad_N.S1.u_open_on;
        edge .pad_N.S2.u_closed_off, .pad_N.S2.u_open_on;
        edge .pad_N.S3.u_closed_off, .pad_N.S3.u_open_on;
      location closing:
        edge .pad_N.c_open goto opening;
        edge .pad_N.c_stop goto rest;
        edge .pad_N.S1.u_closed_on, .pad_N.S1.u_open_off;
        edge .pad_N.S2.u_closed_on, .pad_N.S2.u_open_off;
        edge .pad_N.S3.u_closed_on, .pad_N.S3.u_open_off;
    end
    plant automaton S1:
      location closed:
        initial;
        marked;
        edge .pad_N.S1.u_closed_off goto between;
      location between:
        edge .pad_N.S1.u_closed_on goto closed;
        edge .pad_N.S1.u_open_on goto open;
      location open:
        edge .pad_N.S1.u_open_off goto between;
    end
    plant automaton S2:
      location closed:
        initial;
        marked;
        edge .pad_N.S2.u_closed_off goto between;
      location between:
        edge .pad_N.S2.u_closed_on goto closed;
        edge .pad_N.S2.u_open_on goto open;
      location open:
        edge .pad_N.S2.u_open_off goto between;
    end
    plant automaton S3:
      location closed:
        initial;
        marked;
        edge .pad_N.S3.u_closed_off goto between;
      location between:
        edge .pad_N.S3.u_closed_on goto closed;
        edge .pad_N.S3.u_open_on goto open;
      location open:
        edge .pad_N.S3.u_open_off goto between;
    end
    requirement invariant .pad_N.c_open needs cmd_pad_o;
    requirement invariant .pad_N.c_open needs not S1.open or not S2.open or not S3.open;
    requirement invariant .pad_N.c_close needs cmd_pad_c;
    requirement invariant .pad_N.c_close needs not S1.closed or not S2.closed or not S3.closed;
    requirement invariant .pad_N.c_stop needs cmd_stop_pad or S1.closed and S2.closed and S3.closed and A.closing or S1.open and S2.open and S3.open and A.opening;
    requirement invariant cmd_stop_pad disables .pad_N.c_open;
    requirement invariant cmd_stop_pad disables .pad_N.c_close;
  end
  group pad_S:
    plant automaton A:
      location rest:
        initial;
        marked;
        edge .pad_S.c_open goto opening;
        edge .pad_S.c_close goto closing;
      location opening:
        edge .pad_S.c_close goto closing;
        edge .pad_S.c_stop goto rest;
        edge .pad_S.S1.u_closed_off, .pad_S.S1.u_open_on;
        edge .pad_S.S2.u_closed_off, .pad_S.S2.u_open_on;
        edge .pad_S.S3.u_closed_off, .pad_S.S3.u_open_on;
      location closing:
        edge .pad_S.c_open goto opening;
        edge .pad_S.c_stop goto rest;
        edge .pad_S.S1.u_closed_on, .pad_S.S1.u_open_off;
        edge .pad_S.S2.u_closed_on, .pad_S.S2.u_open_off;
        edge .pad_S.S3.u_closed_on, .pad_S.S3.u_open_off;
    end
    plant automaton S1:
      location closed:
        initial;
        marked;
        edge .pad_S.S1.u_closed_off goto between;
      location between:
        edge .pad_S.S1.u_closed_on goto closed;
        edge .pad_S.S1.u_open_on goto open;
      location open:
        edge .pad_S.S1.u_open_off goto between;
    end
    plant automaton S2:
      location closed:
        initial;
        marked;
        edge .pad_S.S2.u_closed_off goto between;
      location between:
        edge .pad_S.S2.u_closed_on goto closed;
        edge .pad_S.S2.u_open_on goto open;
      location open:
        edge .pad_S.S2.u_open_off goto between;
    end
    plant automaton S3:
      location closed:
        initial;
        marked;
        edge .pad_S.S3.u_closed_off goto between;
      location between:
        edge .pad_S.S3.u_closed_on goto closed;
        edge .pad_S.S3.u_open_on goto open;
      location open:
        edge .pad_S.S3.u_open_off goto between;
    end
    requirement invariant .pad_S.c_open needs cmd_pad_o;
    requirement invariant .pad_S.c_open needs not S1.open or not S2.open or not S3.open;
    requirement invariant .pad_S.c_close needs cmd_pad_c;
    requirement invariant .pad_S.c_close needs not S1.closed or not S2.closed or not S3.closed;
    requirement invariant .pad_S.c_stop needs cmd_stop_pad or S1.closed and S2.closed and S3.closed and A.closing or S1.open and S2.open and S3.open and A.opening;
    requirement invariant cmd_stop_pad disables .pad_S.c_open;
    requirement invariant cmd_stop_pad disables .pad_S.c_close;
  end
  group culvert_N:
    plant automaton A:
      location closed:
        initial;
        marked;
        edge .culvert_N.c_enable goto open;
        edge .culvert_N.u_off;
      location open:
        edge .culvert_N.c_disable goto closed;
        edge .culvert_N.u_on;
    end
    plant automaton S:
      location noflow:
        initial;
        marked;
        edge .culvert_N.u_on goto flow;
      location flow:
        edge .culvert_N.u_off goto noflow;
    end
    requirement invariant .culvert_N.c_enable needs cmd_culvert_o;
    requirement invariant .culvert_N.c_disable needs cmd_culvert_c or cmd_stop_culvert;
    requirement invariant cmd_stop_culvert disables .culvert_N.c_enable;
  end
  group culvert_S:
    plant automaton A:
      location closed:
        initial;
        marked;
        edge .culvert_S.c_enable goto open;
        edge .culvert_S.u_off;
      location open:
        edge .culvert_S.c_disable goto closed;
        edge .culvert_S.u_on;
    end
    plant automaton S:
      location noflow:
        initial;
        marked;
        edge .culvert_S.u_on goto flow;
      location flow:
        edge .culvert_S.u_off goto noflow;
    end
    requirement invariant .culvert_S.c_enable needs cmd_culvert_o;
    requirement invariant .culvert_S.c_disable needs cmd_culvert_c or cmd_stop_culvert;
    requirement invariant cmd_stop_culvert disables .culvert_S.c_enable;
  end
  group gate_D_N:
    alg bool cmd_gate_o = cmd_D_gate_o;
    alg bool cmd_gate_c = cmd_D_gate_c;
    alg bool cmd_stop_gate = cmd_stop_D_gate;
    plant automaton S:
      location closed:
        initial;
        marked;
        edge .gate_D_N.u_s1_on goto bclosed;
      location bclosed:
        edge .gate_D_N.u_s1_off goto closed;
        edge .gate_D_N.u_s2_on goto fclosed;
      location fclosed:
        edge .gate_D_N.u_s2_off goto bclosed;
        edge .gate_D_N.u_s3_on goto middle;
      location middle:
        edge .gate_D_N.u_s3_off goto fclosed;
        edge .gate_D_N.u_s4_off goto fopen;
      location fopen:
        edge .gate_D_N.u_s4_on goto middle;
        edge .gate_D_N.u_s5_off goto bopen;
      location bopen:
        edge .gate_D_N.u_s5_on goto fopen;
        edge .gate_D_N.u_s6_off goto open;
      location open:
        edge .gate_D_N.u_s6_on goto bopen;
    end
    plant automaton Dir:
      location off:
        initial;
        marked;
        edge .gate_D_N.c_open goto opening;
        edge .gate_D_N.c_close goto closing;
      location opening:
        edge .gate_D_N.c_close goto closing;
        edge .gate_D_N.c_stop goto off;
        edge .gate_D_N.u_s1_on, .gate_D_N.u_s2_on, .gate_D_N.u_s3_on, .gate_D_N.u_s4_off, .gate_D_N.u_s5_off, .gate_D_N.u_s6_off;
      location closing:
        edge .gate_D_N.c_open goto opening;
        edge .gate_D_N.c_stop goto off;
        edge .gate_D_N.u_s6_on, .gate_D_N.u_s5_on, .gate_D_N.u_s4_on, .gate_D_N.u_s3_off, .gate_D_N.u_s2_off, .gate_D_N.u_s1_off;
    end
    plant automaton Spe:
      location off:
        initial;
        marked;
        edge .gate_D_N.c_fc_on goto fast_c;
        edge .gate_D_N.c_sc_on goto slow_c;
        edge .gate_D_N.c_fo_on goto fast_o;
        edge .gate_D_N.c_so_on goto slow_o;
      location fast_c:
        edge .gate_D_N.c_fc_off goto off;
      location slow_c:
        edge .gate_D_N.c_sc_off goto off;
      location fast_o:
        edge .gate_D_N.c_fo_off goto off;
      location slow_o:
        edge .gate_D_N.c_so_off goto off;
    end
    plant automaton Pre:
      location off:
        initial;
        marked;
        edge .gate_D_N.c_high_on goto high;
        edge .gate_D_N.c_low_on goto low;
      location high:
        edge .gate_D_N.c_high_off goto off;
      location low:
        edge .gate_D_N.c_low_off goto off;
    end
    requirement invariant .gate_D_N.c_open needs cmd_gate_o and not S.open;
    requirement invariant .gate_D_N.c_close needs cmd_gate_c and not S.closed;
    requirement invariant .gate_D_N.c_stop needs cmd_stop_gate or S.closed and Dir.closing or S.open and Dir.opening;
    requirement invariant cmd_stop_gate disables .gate_D_N.c_open;
    requirement invariant cmd_stop_gate disables .gate_D_N.c_close;
  end
  group gate_D_S:
    alg bool cmd_gate_o = cmd_D_gate_o;
    alg bool cmd_gate_c = cmd_D_gate_c;
    alg bool cmd_stop_gate = cmd_stop_D_gate;
    plant automaton S:
      location closed:
        initial;
        marked;
        edge .gate_D_S.u_s1_on goto bclosed;
      location bclosed:
        edge .gate_D_S.u_s1_off goto closed;
        edge .gate_D_S.u_s2_on goto fclosed;
      location fclosed:
        edge .gate_D_S.u_s2_off goto bclosed;
        edge .gate_D_S.u_s3_on goto middle;
      location middle:
        edge .gate_D_S.u_s3_off goto fclosed;
        edge .gate_D_S.u_s4_off goto fopen;
      location fopen:
        edge .gate_D_S.u_s4_on goto middle;
        edge .gate_D_S.u_s5_off goto bopen;
      location bopen:
        edge .gate_D_S.u_s5_on goto fopen;
        edge .gate_D_S.u_s6_off goto open;
      location open:
        edge .gate_D_S.u_s6_on goto bopen;
    end
    plant automaton Dir:
      location off:
        initial;
        marked;
        edge .gate_D_S.c_open goto opening;
        edge .gate_D_S.c_close goto closing;
      location opening:
        edge .gate_D_S.c_close goto closing;
        edge .gate_D_S.c_stop goto off;
        edge .gate_D_S.u_s1_on, .gate_D_S.u_s2_on, .gate_D_S.u_s3_on, .gate_D_S.u_s4_off, .gate_D_S.u_s5_off, .gate_D_S.u_s6_off;
      location closing:
        edge .gate_D_S.c_open goto opening;
        edge .gate_D_S.c_stop goto off;
        edge .gate_D_S.u_s6_on, .gate_D_S.u_s5_on, .gate_D_S.u_s4_on, .gate_D_S.u_s3_off, .gate_D_S.u_s2_off, .gate_D_S.u_s1_off;
    end
    plant automaton Spe:
      location off:
        initial;
        marked;
        edge .gate_D_S.c_fc_on goto fast_c;
        edge .gate_D_S.c_sc_on goto slow_c;
        edge .gate_D_S.c_fo_on goto fast_o;
        edge .gate_D_S.c_so_on goto slow_o;
      location fast_c:
        edge .gate_D_S.c_fc_off goto off;
      location slow_c:
        edge .gate_D_S.c_sc_off goto off;
      location fast_o:
        edge .gate_D_S.c_fo_off goto off;
      location slow_o:
        edge .gate_D_S.c_so_off goto off;
    end
    plant automaton Pre:
      location off:
        initial;
        marked;
        edge .gate_D_S.c_high_on goto high;
        edge .gate_D_S.c_low_on goto low;
      location high:
        edge .gate_D_S.c_high_off goto off;
      location low:
        edge .gate_D_S.c_low_off goto off;
    end
    requirement invariant .gate_D_S.c_open needs cmd_gate_o and not S.open;
    requirement invariant .gate_D_S.c_close needs cmd_gate_c and not S.closed;
    requirement invariant .gate_D_S.c_stop needs cmd_stop_gate or S.closed and Dir.closing or S.open and Dir.opening;
    requirement invariant cmd_stop_gate disables .gate_D_S.c_open;
    requirement invariant cmd_stop_gate disables .gate_D_S.c_close;
  end
  group gate_U_N:
    alg bool cmd_gate_o = cmd_U_gate_o;
    alg bool cmd_gate_c = cmd_U_gate_c;
    alg bool cmd_stop_gate = cmd_stop_U_gate;
    plant automaton S:
      location closed:
        initial;
        marked;
        edge .gate_U_N.u_s1_on goto bclosed;
      location bclosed:
        edge .gate_U_N.u_s1_off goto closed;
        edge .gate_U_N.u_s2_on goto fclosed;
      location fclosed:
        edge .gate_U_N.u_s2_off goto bclosed;
        edge .gate_U_N.u_s3_on goto middle;
      location middle:
        edge .gate_U_N.u_s3_off goto fclosed;
        edge .gate_U_N.u_s4_off goto fopen;
      location fopen:
        edge .gate_U_N.u_s4_on goto middle;
        edge .gate_U_N.u_s5_off goto bopen;
      location bopen:
        edge .gate_U_N.u_s5_on goto fopen;
        edge .gate_U_N.u_s6_off goto open;
      location open:
        edge .gate_U_N.u_s6_on goto bopen;
    end
    plant automaton Dir:
      location off:
        initial;
        marked;
        edge .gate_U_N.c_open goto opening;
        edge .gate_U_N.c_close goto closing;
      location opening:
        edge .gate_U_N.c_close goto closing;
        edge .gate_U_N.c_stop goto off;
        edge .gate_U_N.u_s1_on, .gate_U_N.u_s2_on, .gate_U_N.u_s3_on, .gate_U_N.u_s4_off, .gate_U_N.u_s5_off, .gate_U_N.u_s6_off;
      location closing:
        edge .gate_U_N.c_open goto opening;
        edge .gate_U_N.c_stop goto off;
        edge .gate_U_N.u_s6_on, .gate_U_N.u_s5_on, .gate_U_N.u_s4_on, .gate_U_N.u_s3_off, .gate_U_N.u_s2_off, .gate_U_N.u_s1_off;
    end
    plant automaton Spe:
      location off:
        initial;
        marked;
        edge .gate_U_N.c_fc_on goto fast_c;
        edge .gate_U_N.c_sc_on goto slow_c;
        edge .gate_U_N.c_fo_on goto fast_o;
        edge .gate_U_N.c_so_on goto slow_o;
      location fast_c:
        edge .gate_U_N.c_fc_off goto off;
      location slow_c:
        edge .gate_U_N.c_sc_off goto off;
      location fast_o:
        edge .gate_U_N.c_fo_off goto off;
      location slow_o:
        edge .gate_U_N.c_so_off goto off;
    end
    plant automaton Pre:
      location off:
        initial;
        marked;
        edge .gate_U_N.c_high_on goto high;
        edge .gate_U_N.c_low_on goto low;
      location high:
        edge .gate_U_N.c_high_off goto off;
      location low:
        edge .gate_U_N.c_low_off goto off;
    end
    requirement invariant .gate_U_N.c_open needs cmd_gate_o and not S.open;
    requirement invariant .gate_U_N.c_close needs cmd_gate_c and not S.closed;
    requirement invariant .gate_U_N.c_stop needs cmd_stop_gate or S.closed and Dir.closing or S.open and Dir.opening;
    requirement invariant cmd_stop_gate disables .gate_U_N.c_open;
    requirement invariant cmd_stop_gate disables .gate_U_N.c_close;
  end
  group gate_U_S:
    alg bool cmd_gate_o = cmd_U_gate_o;
    alg bool cmd_gate_c = cmd_U_gate_c;
    alg bool cmd_stop_gate = cmd_stop_U_gate;
    plant automaton S:
      location closed:
        initial;
        marked;
        edge .gate_U_S.u_s1_on goto bclosed;
      location bclosed:
        edge .gate_U_S.u_s1_off goto closed;
        edge .gate_U_S.u_s2_on goto fclosed;
      location fclosed:
        edge .gate_U_S.u_s2_off goto bclosed;
        edge .gate_U_S.u_s3_on goto middle;
      location middle:
        edge .gate_U_S.u_s3_off goto fclosed;
        edge .gate_U_S.u_s4_off goto fopen;
      location fopen:
        edge .gate_U_S.u_s4_on goto middle;
        edge .gate_U_S.u_s5_off goto bopen;
      location bopen:
        edge .gate_U_S.u_s5_on goto fopen;
        edge .gate_U_S.u_s6_off goto open;
      location open:
        edge .gate_U_S.u_s6_on goto bopen;
    end
    plant automaton Dir:
      location off:
        initial;
        marked;
        edge .gate_U_S.c_open goto opening;
        edge .gate_U_S.c_close goto closing;
      location opening:
        edge .gate_U_S.c_close goto closing;
        edge .gate_U_S.c_stop goto off;
        edge .gate_U_S.u_s1_on, .gate_U_S.u_s2_on, .gate_U_S.u_s3_on, .gate_U_S.u_s4_off, .gate_U_S.u_s5_off, .gate_U_S.u_s6_off;
      location closing:
        edge .gate_U_S.c_open goto opening;
        edge .gate_U_S.c_stop goto off;
        edge .gate_U_S.u_s6_on, .gate_U_S.u_s5_on, .gate_U_S.u_s4_on, .gate_U_S.u_s3_off, .gate_U_S.u_s2_off, .gate_U_S.u_s1_off;
    end
    plant automaton Spe:
      location off:
        initial;
        marked;
        edge .gate_U_S.c_fc_on goto fast_c;
        edge .gate_U_S.c_sc_on goto slow_c;
        edge .gate_U_S.c_fo_on goto fast_o;
        edge .gate_U_S.c_so_on goto slow_o;
      location fast_c:
        edge .gate_U_S.c_fc_off goto off;
      location slow_c:
        edge .gate_U_S.c_sc_off goto off;
      location fast_o:
        edge .gate_U_S.c_fo_off goto off;
      location slow_o:
        edge .gate_U_S.c_so_off goto off;
    end
    plant automaton Pre:
      location off:
        initial;
        marked;
        edge .gate_U_S.c_high_on goto high;
        edge .gate_U_S.c_low_on goto low;
      location high:
        edge .gate_U_S.c_high_off goto off;
      location low:
        edge .gate_U_S.c_low_off goto off;
    end
    requirement invariant .gate_U_S.c_open needs cmd_gate_o and not S.open;
    requirement invariant .gate_U_S.c_close needs cmd_gate_c and not S.closed;
    requirement invariant .gate_U_S.c_stop needs cmd_stop_gate or S.closed and Dir.closing or S.open and Dir.opening;
    requirement invariant cmd_stop_gate disables .gate_U_S.c_open;
    requirement invariant cmd_stop_gate disables .gate_U_S.c_close;
  end
  plant automaton s_equal_D:
    location off:
      marked;
      edge .s_equal_D.u_equal_on goto on;
    location on:
      initial;
      marked;
      edge .s_equal_D.u_equal_off goto off;
  end
  plant automaton s_equal_U:
    location off:
      initial;
      marked;
      edge .s_equal_U.u_equal_on goto on;
    location on:
      marked;
      edge .s_equal_U.u_equal_off goto off;
  end
  group out_D_N:
    alg bool cmd_out_r = cmd_D_out_r;
    alg bool cmd_out_g = cmd_D_out_g;
    plant automaton S:
      location off:
        edge .out_D_N.u_r_on goto red;
        edge .out_D_N.u_g_on goto green;
      location red:
        initial;
        marked;
        edge .out_D_N.u_r_off goto off;
        edge .out_D_N.u_g_on goto redgreen;
      location green:
        edge .out_D_N.u_r_on goto redgreen;
        edge .out_D_N.u_g_off goto off;
      location redgreen:
        edge .out_D_N.u_r_off goto green;
        edge .out_D_N.u_g_off goto red;
    end
    plant automaton A:
      location red:
        initial;
        marked;
        edge .out_D_N.c_green goto green;
        edge .out_D_N.u_r_on, .out_D_N.u_g_off;
      location green:
        edge .out_D_N.c_red goto red;
        edge .out_D_N.u_g_on, .out_D_N.u_r_off;
    end
    requirement invariant .out_D_N.c_red needs cmd_out_r or cmd_stop;
    requirement invariant .out_D_N.c_green needs cmd_out_g;
    requirement invariant cmd_stop disables .out_D_N.c_green;
  end
  group out_D_S:
    alg bool cmd_out_r = cmd_D_out_r;
    alg bool cmd_out_g = cmd_D_out_g;
    plant automaton S:
      location off:
        edge .out_D_S.u_r_on goto red;
        edge .out_D_S.u_g_on goto green;
      location red:
        initial;
        marked;
        edge .out_D_S.u_r_off goto off;
        edge .out_D_S.u_g_on goto redgreen;
      location green:
        edge .out_D_S.u_r_on goto redgreen;
        edge .out_D_S.u_g_off goto off;
      location redgreen:
        edge .out_D_S.u_r_off goto green;
        edge .out_D_S.u_g_off goto red;
    end
    plant automaton A:
      location red:
        initial;
        marked;
        edge .out_D_S.c_green goto green;
        edge .out_D_S.u_r_on, .out_D_S.u_g_off;
      location green:
        edge .out_D_S.c_red goto red;
        edge .out_D_S.u_g_on, .out_D_S.u_r_off;
    end
    requirement invariant .out_D_S.c_red needs cmd_out_r or cmd_stop;
    requirement invariant .out_D_S.c_green needs cmd_out_g;
    requirement invariant cmd_stop disables .out_D_S.c_green;
  end
  group out_U_N:
    alg bool cmd_out_r = cmd_U_out_r;
    alg bool cmd_out_g = cmd_U_out_g;
    plant automaton S:
      location off:
        edge .out_U_N.u_r_on goto red;
        edge .out_U_N.u_g_on goto green;
      location red:
        initial;
        marked;
        edge .out_U_N.u_r_off goto off;
        edge .out_U_N.u_g_on goto redgreen;
      location green:
        edge .out_U_N.u_r_on goto redgreen;
        edge .out_U_N.u_g_off goto off;
      location redgreen:
        edge .out_U_N.u_r_off goto green;
        edge .out_U_N.u_g_off goto red;
    end
    plant automaton A:
      location red:
        initial;
        marked;
        edge .out_U_N.c_green goto green;
        edge .out_U_N.u_r_on, .out_U_N.u_g_off;
      location green:
        edge .out_U_N.c_red goto red;
        edge .out_U_N.u_g_on, .out_U_N.u_r_off;
    end
    requirement invariant .out_U_N.c_red needs cmd_out_r or cmd_stop;
    requirement invariant .out_U_N.c_green needs cmd_out_g;
    requirement invariant cmd_stop disables .out_U_N.c_green;
  end
  group out_U_S:
    alg bool cmd_out_r = cmd_U_out_r;
    alg bool cmd_out_g = cmd_U_out_g;
    plant automaton S:
      location off:
        edge .out_U_S.u_r_on goto red;
        edge .out_U_S.u_g_on goto green;
      location red:
        initial;
        marked;
        edge .out_U_S.u_r_off goto off;
        edge .out_U_S.u_g_on goto redgreen;
      location green:
        edge .out_U_S.u_r_on goto redgreen;
        edge .out_U_S.u_g_off goto off;
      location redgreen:
        edge .out_U_S.u_r_off goto green;
        edge .out_U_S.u_g_off goto red;
    end
    plant automaton A:
      location red:
        initial;
        marked;
        edge .out_U_S.c_green goto green;
        edge .out_U_S.u_r_on, .out_U_S.u_g_off;
      location green:
        edge .out_U_S.c_red goto red;
        edge .out_U_S.u_g_on, .out_U_S.u_r_off;
    end
    requirement invariant .out_U_S.c_red needs cmd_out_r or cmd_stop;
    requirement invariant .out_U_S.c_green needs cmd_out_g;
    requirement invariant cmd_stop disables .out_U_S.c_green;
  end
  group in_D_N:
    alg bool cmd_in_red = cmd_D_in_r;
    alg bool cmd_in_green = cmd_D_in_g;
    alg bool cmd_in_rg = cmd_D_in_rg;
    alg bool cmd_in_redred = cmd_D_in_rr;
    plant automaton S:
      location off:
        edge .in_D_N.u_r_on goto red;
        edge .in_D_N.u_g_on goto green;
        edge .in_D_N.u_s_on goto lowred;
      location red:
        initial;
        marked;
        edge .in_D_N.u_r_off goto off;
        edge .in_D_N.u_g_on goto redgreen;
        edge .in_D_N.u_s_on goto redred;
      location green:
        edge .in_D_N.u_r_on goto redgreen;
        edge .in_D_N.u_g_off goto off;
        edge .in_D_N.u_s_on goto greenred;
      location lowred:
        edge .in_D_N.u_r_on goto redred;
        edge .in_D_N.u_g_on goto greenred;
        edge .in_D_N.u_s_off goto off;
      location redgreen:
        edge .in_D_N.u_r_off goto green;
        edge .in_D_N.u_g_off goto red;
        edge .in_D_N.u_s_on goto redgreenred;
      location redred:
        edge .in_D_N.u_r_off goto lowred;
        edge .in_D_N.u_g_on goto redgreenred;
        edge .in_D_N.u_s_off goto red;
      location greenred:
        edge .in_D_N.u_r_on goto redgreenred;
        edge .in_D_N.u_g_off goto lowred;
        edge .in_D_N.u_s_off goto green;
      location redgreenred:
        edge .in_D_N.u_r_off goto greenred;
        edge .in_D_N.u_g_off goto redred;
        edge .in_D_N.u_s_off goto redgreen;
    end
    plant automaton A:
      location red:
        initial;
        marked;
        edge .in_D_N.c_redgreen goto redgreen;
        edge .in_D_N.c_redred goto redred;
        edge .in_D_N.u_r_on, .in_D_N.u_g_off, .in_D_N.u_s_off;
      location green:
        edge .in_D_N.c_red goto red;
        edge .in_D_N.c_redgreen goto redgreen;
        edge .in_D_N.u_r_off, .in_D_N.u_g_on, .in_D_N.u_s_off;
      location redred:
        edge .in_D_N.c_red goto red;
        edge .in_D_N.u_r_on, .in_D_N.u_g_off, .in_D_N.u_s_on;
      location redgreen:
        edge .in_D_N.c_green goto green;
        edge .in_D_N.c_red goto red;
        edge .in_D_N.u_r_on, .in_D_N.u_g_on, .in_D_N.u_s_off;
    end
    requirement invariant .in_D_N.c_red needs cmd_in_red or cmd_stop;
    requirement invariant .in_D_N.c_green needs cmd_in_green;
    requirement invariant .in_D_N.c_redgreen needs cmd_in_rg;
    requirement invariant .in_D_N.c_redred needs cmd_in_redred;
    requirement invariant cmd_stop disables .in_D_N.c_green;
    requirement invariant cmd_stop disables .in_D_N.c_redgreen;
    requirement invariant cmd_stop disables .in_D_N.c_redred;
  end
  group in_D_S:
    alg bool cmd_in_red = cmd_D_in_r;
    alg bool cmd_in_green = cmd_D_in_g;
    alg bool cmd_in_rg = cmd_D_in_rg;
    alg bool cmd_in_redred = cmd_D_in_rr;
    plant automaton S:
      location off:
        edge .in_D_S.u_r_on goto red;
        edge .in_D_S.u_g_on goto green;
        edge .in_D_S.u_s_on goto lowred;
      location red:
        initial;
        marked;
        edge .in_D_S.u_r_off goto off;
        edge .in_D_S.u_g_on goto redgreen;
        edge .in_D_S.u_s_on goto redred;
      location green:
        edge .in_D_S.u_r_on goto redgreen;
        edge .in_D_S.u_g_off goto off;
        edge .in_D_S.u_s_on goto greenred;
      location lowred:
        edge .in_D_S.u_r_on goto redred;
        edge .in_D_S.u_g_on goto greenred;
        edge .in_D_S.u_s_off goto off;
      location redgreen:
        edge .in_D_S.u_r_off goto green;
        edge .in_D_S.u_g_off goto red;
        edge .in_D_S.u_s_on goto redgreenred;
      location redred:
        edge .in_D_S.u_r_off goto lowred;
        edge .in_D_S.u_g_on goto redgreenred;
        edge .in_D_S.u_s_off goto red;
      location greenred:
        edge .in_D_S.u_r_on goto redgreenred;
        edge .in_D_S.u_g_off goto lowred;
        edge .in_D_S.u_s_off goto green;
      location redgreenred:
        edge .in_D_S.u_r_off goto greenred;
        edge .in_D_S.u_g_off goto redred;
        edge .in_D_S.u_s_off goto redgreen;
    end
    plant automaton A:
      location red:
        initial;
        marked;
        edge .in_D_S.c_redgreen goto redgreen;
        edge .in_D_S.c_redred goto redred;
        edge .in_D_S.u_r_on, .in_D_S.u_g_off, .in_D_S.u_s_off;
      location green:
        edge .in_D_S.c_red goto red;
        edge .in_D_S.c_redgreen goto redgreen;
        edge .in_D_S.u_r_off, .in_D_S.u_g_on, .in_D_S.u_s_off;
      location redred:
        edge .in_D_S.c_red goto red;
        edge .in_D_S.u_r_on, .in_D_S.u_g_off, .in_D_S.u_s_on;
      location redgreen:
        edge .in_D_S.c_green goto green;
        edge .in_D_S.c_red goto red;
        edge .in_D_S.u_r_on, .in_D_S.u_g_on, .in_D_S.u_s_off;
    end
    requirement invariant .in_D_S.c_red needs cmd_in_red or cmd_stop;
    requirement invariant .in_D_S.c_green needs cmd_in_green;
    requirement invariant .in_D_S.c_redgreen needs cmd_in_rg;
    requirement invariant .in_D_S.c_redred needs cmd_in_redred;
    requirement invariant cmd_stop disables .in_D_S.c_green;
    requirement invariant cmd_stop disables .in_D_S.c_redgreen;
    requirement invariant cmd_stop disables .in_D_S.c_redred;
  end
  group in_U_N:
    alg bool cmd_in_red = cmd_U_in_r;
    alg bool cmd_in_green = cmd_U_in_g;
    alg bool cmd_in_rg = cmd_U_in_rg;
    alg bool cmd_in_redred = cmd_U_in_rr;
    plant automaton S:
      location off:
        edge .in_U_N.u_r_on goto red;
        edge .in_U_N.u_g_on goto green;
        edge .in_U_N.u_s_on goto lowred;
      location red:
        initial;
        marked;
        edge .in_U_N.u_r_off goto off;
        edge .in_U_N.u_g_on goto redgreen;
        edge .in_U_N.u_s_on goto redred;
      location green:
        edge .in_U_N.u_r_on goto redgreen;
        edge .in_U_N.u_g_off goto off;
        edge .in_U_N.u_s_on goto greenred;
      location lowred:
        edge .in_U_N.u_r_on goto redred;
        edge .in_U_N.u_g_on goto greenred;
        edge .in_U_N.u_s_off goto off;
      location redgreen:
        edge .in_U_N.u_r_off goto green;
        edge .in_U_N.u_g_off goto red;
        edge .in_U_N.u_s_on goto redgreenred;
      location redred:
        edge .in_U_N.u_r_off goto lowred;
        edge .in_U_N.u_g_on goto redgreenred;
        edge .in_U_N.u_s_off goto red;
      location greenred:
        edge .in_U_N.u_r_on goto redgreenred;
        edge .in_U_N.u_g_off goto lowred;
        edge .in_U_N.u_s_off goto green;
      location redgreenred:
        edge .in_U_N.u_r_off goto greenred;
        edge .in_U_N.u_g_off goto redred;
        edge .in_U_N.u_s_off goto redgreen;
    end
    plant automaton A:
      location red:
        initial;
        marked;
        edge .in_U_N.c_redgreen goto redgreen;
        edge .in_U_N.c_redred goto redred;
        edge .in_U_N.u_r_on, .in_U_N.u_g_off, .in_U_N.u_s_off;
      location green:
        edge .in_U_N.c_red goto red;
        edge .in_U_N.c_redgreen goto redgreen;
        edge .in_U_N.u_r_off, .in_U_N.u_g_on, .in_U_N.u_s_off;
      location redred:
        edge .in_U_N.c_red goto red;
        edge .in_U_N.u_r_on, .in_U_N.u_g_off, .in_U_N.u_s_on;
      location redgreen:
        edge .in_U_N.c_green goto green;
        edge .in_U_N.c_red goto red;
        edge .in_U_N.u_r_on, .in_U_N.u_g_on, .in_U_N.u_s_off;
    end
    requirement invariant .in_U_N.c_red needs cmd_in_red or cmd_stop;
    requirement invariant .in_U_N.c_green needs cmd_in_green;
    requirement invariant .in_U_N.c_redgreen needs cmd_in_rg;
    requirement invariant .in_U_N.c_redred needs cmd_in_redred;
    requirement invariant cmd_stop disables .in_U_N.c_green;
    requirement invariant cmd_stop disables .in_U_N.c_redgreen;
    requirement invariant cmd_stop disables .in_U_N.c_redred;
  end
  group in_U_S:
    alg bool cmd_in_red = cmd_U_in_r;
    alg bool cmd_in_green = cmd_U_in_g;
    alg bool cmd_in_rg = cmd_U_in_rg;
    alg bool cmd_in_redred = cmd_U_in_rr;
    plant automaton S:
      location off:
        edge .in_U_S.u_r_on goto red;
        edge .in_U_S.u_g_on goto green;
        edge .in_U_S.u_s_on goto lowred;
      location red:
        initial;
        marked;
        edge .in_U_S.u_r_off goto off;
        edge .in_U_S.u_g_on goto redgreen;
        edge .in_U_S.u_s_on goto redred;
      location green:
        edge .in_U_S.u_r_on goto redgreen;
        edge .in_U_S.u_g_off goto off;
        edge .in_U_S.u_s_on goto greenred;
      location lowred:
        edge .in_U_S.u_r_on goto redred;
        edge .in_U_S.u_g_on goto greenred;
        edge .in_U_S.u_s_off goto off;
      location redgreen:
        edge .in_U_S.u_r_off goto green;
        edge .in_U_S.u_g_off goto red;
        edge .in_U_S.u_s_on goto redgreenred;
      location redred:
        edge .in_U_S.u_r_off goto lowred;
        edge .in_U_S.u_g_on goto redgreenred;
        edge .in_U_S.u_s_off goto red;
      location greenred:
        edge .in_U_S.u_r_on goto redgreenred;
        edge .in_U_S.u_g_off goto lowred;
        edge .in_U_S.u_s_off goto green;
      location redgreenred:
        edge .in_U_S.u_r_off goto greenred;
        edge .in_U_S.u_g_off goto redred;
        edge .in_U_S.u_s_off goto redgreen;
    end
    plant automaton A:
      location red:
        initial;
        marked;
        edge .in_U_S.c_redgreen goto redgreen;
        edge .in_U_S.c_redred goto redred;
        edge .in_U_S.u_r_on, .in_U_S.u_g_off, .in_U_S.u_s_off;
      location green:
        edge .in_U_S.c_red goto red;
        edge .in_U_S.c_redgreen goto redgreen;
        edge .in_U_S.u_r_off, .in_U_S.u_g_on, .in_U_S.u_s_off;
      location redred:
        edge .in_U_S.c_red goto red;
        edge .in_U_S.u_r_on, .in_U_S.u_g_off, .in_U_S.u_s_on;
      location redgreen:
        edge .in_U_S.c_green goto green;
        edge .in_U_S.c_red goto red;
        edge .in_U_S.u_r_on, .in_U_S.u_g_on, .in_U_S.u_s_off;
    end
    requirement invariant .in_U_S.c_red needs cmd_in_red or cmd_stop;
    requirement invariant .in_U_S.c_green needs cmd_in_green;
    requirement invariant .in_U_S.c_redgreen needs cmd_in_rg;
    requirement invariant .in_U_S.c_redred needs cmd_in_redred;
    requirement invariant cmd_stop disables .in_U_S.c_green;
    requirement invariant cmd_stop disables .in_U_S.c_redgreen;
    requirement invariant cmd_stop disables .in_U_S.c_redred;
  end
  group req_gate_D_S:
    alg bool s_closed = gate_D_S.S.closed;
    alg bool s_bclosed = gate_D_S.S.bclosed;
    alg bool s_frclosed = gate_D_S.S.fclosed;
    alg bool s_middle = gate_D_S.S.middle;
    alg bool s_fropen = gate_D_S.S.fopen;
    alg bool s_bopen = gate_D_S.S.bopen;
    alg bool s_open = gate_D_S.S.open;
    alg bool closing = gate_D_S.Dir.closing;
    alg bool opening = gate_D_S.Dir.opening;
    requirement invariant .gate_D_S.c_fc_on needs not(s_bclosed or s_closed) and closing;
    requirement invariant .gate_D_S.c_fc_off needs s_bclosed or s_closed;
    requirement invariant .gate_D_S.c_sc_on needs s_bclosed and closing;
    requirement invariant .gate_D_S.c_sc_off needs not s_bclosed;
    requirement invariant .gate_D_S.c_fo_on needs not(s_bopen or s_open) and opening;
    requirement invariant .gate_D_S.c_fo_off needs s_bopen or s_open;
    requirement invariant .gate_D_S.c_so_on needs s_bopen and opening;
    requirement invariant .gate_D_S.c_so_off needs not s_bopen;
    requirement invariant .gate_D_S.c_high_on needs (s_open or s_bopen or s_fropen or s_middle) and closing or (s_closed or s_bclosed or s_frclosed or s_middle) and opening;
    requirement invariant .gate_D_S.c_high_off needs not((s_open or s_bopen or s_fropen or s_middle) and closing or (s_closed or s_bclosed or s_frclosed or s_middle) and opening);
    requirement invariant .gate_D_S.c_low_on needs (s_frclosed or s_bclosed) and closing or (s_fropen or s_bopen) and opening;
    requirement invariant .gate_D_S.c_low_off needs not((s_frclosed or s_bclosed) and closing or (s_fropen or s_bopen) and opening);
  end
  group req_gate_D_N:
    alg bool s_closed = gate_D_N.S.closed;
    alg bool s_bclosed = gate_D_N.S.bclosed;
    alg bool s_frclosed = gate_D_N.S.fclosed;
    alg bool s_middle = gate_D_N.S.middle;
    alg bool s_fropen = gate_D_N.S.fopen;
    alg bool s_bopen = gate_D_N.S.bopen;
    alg bool s_open = gate_D_N.S.open;
    alg bool closing = gate_D_N.Dir.closing;
    alg bool opening = gate_D_N.Dir.opening;
    requirement invariant .gate_D_N.c_fc_on needs not(s_bclosed or s_closed) and closing;
    requirement invariant .gate_D_N.c_fc_off needs s_bclosed or s_closed;
    requirement invariant .gate_D_N.c_sc_on needs s_bclosed and closing;
    requirement invariant .gate_D_N.c_sc_off needs not s_bclosed;
    requirement invariant .gate_D_N.c_fo_on needs not(s_bopen or s_open) and opening;
    requirement invariant .gate_D_N.c_fo_off needs s_bopen or s_open;
    requirement invariant .gate_D_N.c_so_on needs s_bopen and opening;
    requirement invariant .gate_D_N.c_so_off needs not s_bopen;
    requirement invariant .gate_D_N.c_high_on needs (s_open or s_bopen or s_fropen or s_middle) and closing or (s_closed or s_bclosed or s_frclosed or s_middle) and opening;
    requirement invariant .gate_D_N.c_high_off needs not((s_open or s_bopen or s_fropen or s_middle) and closing or (s_closed or s_bclosed or s_frclosed or s_middle) and opening);
    requirement invariant .gate_D_N.c_low_on needs (s_frclosed or s_bclosed) and closing or (s_fropen or s_bopen) and opening;
    requirement invariant .gate_D_N.c_low_off needs not((s_frclosed or s_bclosed) and closing or (s_fropen or s_bopen) and opening);
  end
  group req_gate_U_S:
    alg bool s_closed = gate_U_S.S.closed;
    alg bool s_bclosed = gate_U_S.S.bclosed;
    alg bool s_frclosed = gate_U_S.S.fclosed;
    alg bool s_middle = gate_U_S.S.middle;
    alg bool s_fropen = gate_U_S.S.fopen;
    alg bool s_bopen = gate_U_S.S.bopen;
    alg bool s_open = gate_U_S.S.open;
    alg bool closing = gate_U_S.Dir.closing;
    alg bool opening = gate_U_S.Dir.opening;
    requirement invariant .gate_U_S.c_fc_on needs not(s_bclosed or s_closed) and closing;
    requirement invariant .gate_U_S.c_fc_off needs s_bclosed or s_closed;
    requirement invariant .gate_U_S.c_sc_on needs s_bclosed and closing;
    requirement invariant .gate_U_S.c_sc_off needs not s_bclosed;
    requirement invariant .gate_U_S.c_fo_on needs not(s_bopen or s_open) and opening;
    requirement invariant .gate_U_S.c_fo_off needs s_bopen or s_open;
    requirement invariant .gate_U_S.c_so_on needs s_bopen and opening;
    requirement invariant .gate_U_S.c_so_off needs not s_bopen;
    requirement invariant .gate_U_S.c_high_on needs (s_open or s_bopen or s_fropen or s_middle) and closing or (s_closed or s_bclosed or s_frclosed or s_middle) and opening;
    requirement invariant .gate_U_S.c_high_off needs not((s_open or s_bopen or s_fropen or s_middle) and closing or (s_closed or s_bclosed or s_frclosed or s_middle) and opening);
    requirement invariant .gate_U_S.c_low_on needs (s_frclosed or s_bclosed) and closing or (s_fropen or s_bopen) and opening;
    requirement invariant .gate_U_S.c_low_off needs not((s_frclosed or s_bclosed) and closing or (s_fropen or s_bopen) and opening);
  end
  group req_gate_U_N:
    alg bool s_closed = gate_U_N.S.closed;
    alg bool s_bclosed = gate_U_N.S.bclosed;
    alg bool s_frclosed = gate_U_N.S.fclosed;
    alg bool s_middle = gate_U_N.S.middle;
    alg bool s_fropen = gate_U_N.S.fopen;
    alg bool s_bopen = gate_U_N.S.bopen;
    alg bool s_open = gate_U_N.S.open;
    alg bool closing = gate_U_N.Dir.closing;
    alg bool opening = gate_U_N.Dir.opening;
    requirement invariant .gate_U_N.c_fc_on needs not(s_bclosed or s_closed) and closing;
    requirement invariant .gate_U_N.c_fc_off needs s_bclosed or s_closed;
    requirement invariant .gate_U_N.c_sc_on needs s_bclosed and closing;
    requirement invariant .gate_U_N.c_sc_off needs not s_bclosed;
    requirement invariant .gate_U_N.c_fo_on needs not(s_bopen or s_open) and opening;
    requirement invariant .gate_U_N.c_fo_off needs s_bopen or s_open;
    requirement invariant .gate_U_N.c_so_on needs s_bopen and opening;
    requirement invariant .gate_U_N.c_so_off needs not s_bopen;
    requirement invariant .gate_U_N.c_high_on needs (s_open or s_bopen or s_fropen or s_middle) and closing or (s_closed or s_bclosed or s_frclosed or s_middle) and opening;
    requirement invariant .gate_U_N.c_high_off needs not((s_open or s_bopen or s_fropen or s_middle) and closing or (s_closed or s_bclosed or s_frclosed or s_middle) and opening);
    requirement invariant .gate_U_N.c_low_on needs (s_frclosed or s_bclosed) and closing or (s_fropen or s_bopen) and opening;
    requirement invariant .gate_U_N.c_low_off needs not((s_frclosed or s_bclosed) and closing or (s_fropen or s_bopen) and opening);
  end
  supervisor automaton sup:
    alphabet .pad_N.c_open, .pad_N.c_close, .pad_N.c_stop, .pad_S.c_open, .pad_S.c_close, .pad_S.c_stop, .culvert_N.c_enable, .culvert_N.c_disable, .culvert_S.c_enable, .culvert_S.c_disable, .gate_D_N.c_open, .gate_D_N.c_close, .gate_D_N.c_stop, .gate_D_N.c_fc_on, .gate_D_N.c_sc_on, .gate_D_N.c_fo_on, .gate_D_N.c_so_on, .gate_D_N.c_fc_off, .gate_D_N.c_sc_off, .gate_D_N.c_fo_off, .gate_D_N.c_so_off, .gate_D_N.c_high_on, .gate_D_N.c_low_on, .gate_D_N.c_high_off, .gate_D_N.c_low_off, .gate_D_S.c_open, .gate_D_S.c_close, .gate_D_S.c_stop, .gate_D_S.c_fc_on, .gate_D_S.c_sc_on, .gate_D_S.c_fo_on, .gate_D_S.c_so_on, .gate_D_S.c_fc_off, .gate_D_S.c_sc_off, .gate_D_S.c_fo_off, .gate_D_S.c_so_off, .gate_D_S.c_high_on, .gate_D_S.c_low_on, .gate_D_S.c_high_off, .gate_D_S.c_low_off, .gate_U_N.c_open, .gate_U_N.c_close, .gate_U_N.c_stop, .gate_U_N.c_fc_on, .gate_U_N.c_sc_on, .gate_U_N.c_fo_on, .gate_U_N.c_so_on, .gate_U_N.c_fc_off, .gate_U_N.c_sc_off, .gate_U_N.c_fo_off, .gate_U_N.c_so_off, .gate_U_N.c_high_on, .gate_U_N.c_low_on, .gate_U_N.c_high_off, .gate_U_N.c_low_off, .gate_U_S.c_open, .gate_U_S.c_close, .gate_U_S.c_stop, .gate_U_S.c_fc_on, .gate_U_S.c_sc_on, .gate_U_S.c_fo_on, .gate_U_S.c_so_on, .gate_U_S.c_fc_off, .gate_U_S.c_sc_off, .gate_U_S.c_fo_off, .gate_U_S.c_so_off, .gate_U_S.c_high_on, .gate_U_S.c_low_on, .gate_U_S.c_high_off, .gate_U_S.c_low_off, .out_D_N.c_green, .out_D_N.c_red, .out_D_S.c_green, .out_D_S.c_red, .out_U_N.c_green, .out_U_N.c_red, .out_U_S.c_green, .out_U_S.c_red, .in_D_N.c_redgreen, .in_D_N.c_redred, .in_D_N.c_red, .in_D_N.c_green, .in_D_S.c_redgreen, .in_D_S.c_redred, .in_D_S.c_red, .in_D_S.c_green, .in_U_N.c_redgreen, .in_U_N.c_redred, .in_U_N.c_red, .in_U_N.c_green, .in_U_S.c_redgreen, .in_U_S.c_redred, .in_U_S.c_red, .in_U_S.c_green;
    location:
      initial;
      marked;
      edge .culvert_N.c_disable when true;
      edge .culvert_N.c_enable when true;
      edge .culvert_S.c_disable when true;
      edge .culvert_S.c_enable when true;
      edge .gate_D_N.c_close when true;
      edge .gate_D_N.c_fc_off when true;
      edge .gate_D_N.c_fc_on when true;
      edge .gate_D_N.c_fo_off when true;
      edge .gate_D_N.c_fo_on when true;
      edge .gate_D_N.c_high_off when true;
      edge .gate_D_N.c_high_on when true;
      edge .gate_D_N.c_low_off when true;
      edge .gate_D_N.c_low_on when true;
      edge .gate_D_N.c_open when true;
      edge .gate_D_N.c_sc_off when true;
      edge .gate_D_N.c_sc_on when true;
      edge .gate_D_N.c_so_off when true;
      edge .gate_D_N.c_so_on when true;
      edge .gate_D_N.c_stop when true;
      edge .gate_D_S.c_close when true;
      edge .gate_D_S.c_fc_off when true;
      edge .gate_D_S.c_fc_on when true;
      edge .gate_D_S.c_fo_off when true;
      edge .gate_D_S.c_fo_on when true;
      edge .gate_D_S.c_high_off when true;
      edge .gate_D_S.c_high_on when true;
      edge .gate_D_S.c_low_off when true;
      edge .gate_D_S.c_low_on when true;
      edge .gate_D_S.c_open when true;
      edge .gate_D_S.c_sc_off when true;
      edge .gate_D_S.c_sc_on when true;
      edge .gate_D_S.c_so_off when true;
      edge .gate_D_S.c_so_on when true;
      edge .gate_D_S.c_stop when true;
      edge .gate_U_N.c_close when true;
      edge .gate_U_N.c_fc_off when true;
      edge .gate_U_N.c_fc_on when true;
      edge .gate_U_N.c_fo_off when true;
      edge .gate_U_N.c_fo_on when true;
      edge .gate_U_N.c_high_off when true;
      edge .gate_U_N.c_high_on when true;
      edge .gate_U_N.c_low_off when true;
      edge .gate_U_N.c_low_on when true;
      edge .gate_U_N.c_open when true;
      edge .gate_U_N.c_sc_off when true;
      edge .gate_U_N.c_sc_on when true;
      edge .gate_U_N.c_so_off when true;
      edge .gate_U_N.c_so_on when true;
      edge .gate_U_N.c_stop when true;
      edge .gate_U_S.c_close when true;
      edge .gate_U_S.c_fc_off when true;
      edge .gate_U_S.c_fc_on when true;
      edge .gate_U_S.c_fo_off when true;
      edge .gate_U_S.c_fo_on when true;
      edge .gate_U_S.c_high_off when true;
      edge .gate_U_S.c_high_on when true;
      edge .gate_U_S.c_low_off when true;
      edge .gate_U_S.c_low_on when true;
      edge .gate_U_S.c_open when true;
      edge .gate_U_S.c_sc_off when true;
      edge .gate_U_S.c_sc_on when true;
      edge .gate_U_S.c_so_off when true;
      edge .gate_U_S.c_so_on when true;
      edge .gate_U_S.c_stop when true;
      edge .in_D_N.c_green when true;
      edge .in_D_N.c_red when true;
      edge .in_D_N.c_redgreen when true;
      edge .in_D_N.c_redred when true;
      edge .in_D_S.c_green when true;
      edge .in_D_S.c_red when true;
      edge .in_D_S.c_redgreen when true;
      edge .in_D_S.c_redred when true;
      edge .in_U_N.c_green when true;
      edge .in_U_N.c_red when true;
      edge .in_U_N.c_redgreen when true;
      edge .in_U_N.c_redred when true;
      edge .in_U_S.c_green when true;
      edge .in_U_S.c_red when true;
      edge .in_U_S.c_redgreen when true;
      edge .in_U_S.c_redred when true;
      edge .out_D_N.c_green when true;
      edge .out_D_N.c_red when true;
      edge .out_D_S.c_green when true;
      edge .out_D_S.c_red when true;
      edge .out_U_N.c_green when true;
      edge .out_U_N.c_red when true;
      edge .out_U_S.c_green when true;
      edge .out_U_S.c_red when true;
      edge .pad_N.c_close when true;
      edge .pad_N.c_open when true;
      edge .pad_N.c_stop when true;
      edge .pad_S.c_close when true;
      edge .pad_S.c_open when true;
      edge .pad_S.c_stop when true;
  end
  requirement invariant emergencystop.pushed disables .in_D_N.c_green;
  requirement invariant emergencystop.pushed disables .in_D_S.c_green;
  requirement invariant emergencystop.pushed disables .in_U_N.c_green;
  requirement invariant emergencystop.pushed disables .in_U_S.c_green;
  requirement invariant emergencystop.pushed disables .in_D_N.c_redgreen;
  requirement invariant emergencystop.pushed disables .in_D_S.c_redgreen;
  requirement invariant emergencystop.pushed disables .in_U_N.c_redgreen;
  requirement invariant emergencystop.pushed disables .in_U_S.c_redgreen;
  requirement invariant emergencystop.pushed disables .out_D_N.c_green;
  requirement invariant emergencystop.pushed disables .out_D_S.c_green;
  requirement invariant emergencystop.pushed disables .out_U_N.c_green;
  requirement invariant emergencystop.pushed disables .out_U_S.c_green;
  requirement invariant emergencystop.pushed disables .pad_N.c_open;
  requirement invariant emergencystop.pushed disables .pad_S.c_open;
  requirement invariant emergencystop.pushed disables .pad_N.c_close;
  requirement invariant emergencystop.pushed disables .pad_S.c_close;
  requirement invariant emergencystop.pushed disables .culvert_N.c_enable;
  requirement invariant emergencystop.pushed disables .culvert_S.c_enable;
  requirement invariant emergencystop.pushed disables .gate_D_N.c_open;
  requirement invariant emergencystop.pushed disables .gate_D_S.c_open;
  requirement invariant emergencystop.pushed disables .gate_U_N.c_open;
  requirement invariant emergencystop.pushed disables .gate_U_S.c_open;
  requirement invariant emergencystop.pushed disables .gate_D_N.c_close;
  requirement invariant emergencystop.pushed disables .gate_D_S.c_close;
  requirement invariant emergencystop.pushed disables .gate_U_N.c_close;
  requirement invariant emergencystop.pushed disables .gate_U_S.c_close;
  requirement invariant culvert_N.S.flow or culvert_N.A.open or culvert_S.S.flow or culvert_S.A.open disables .pad_N.c_open;
  requirement invariant culvert_N.S.flow or culvert_N.A.open or culvert_S.S.flow or culvert_S.A.open disables .pad_S.c_open;
  requirement invariant not pad_N.S1.closed or not pad_N.S2.closed or not pad_N.S3.closed or pad_N.A.opening or not pad_S.S1.closed or not pad_S.S2.closed or not pad_S.S3.closed or pad_S.A.opening disables .culvert_N.c_enable;
  requirement invariant not pad_N.S1.closed or not pad_N.S2.closed or not pad_N.S3.closed or pad_N.A.opening or not pad_S.S1.closed or not pad_S.S2.closed or not pad_S.S3.closed or pad_S.A.opening disables .culvert_S.c_enable;
  requirement invariant not gate_U_N.S.closed or gate_U_N.Dir.opening or not gate_U_S.S.closed or gate_U_S.Dir.opening disables .pad_N.c_open;
  requirement invariant not gate_U_N.S.closed or gate_U_N.Dir.opening or not gate_U_S.S.closed or gate_U_S.Dir.opening disables .pad_S.c_open;
  requirement invariant not gate_D_N.S.closed or gate_D_N.Dir.opening or not gate_D_S.S.closed or gate_D_S.Dir.opening disables .culvert_N.c_enable;
  requirement invariant not gate_D_N.S.closed or gate_D_N.Dir.opening or not gate_D_S.S.closed or gate_D_S.Dir.opening disables .culvert_S.c_enable;
  requirement invariant s_equal_D.off disables .gate_D_N.c_open;
  requirement invariant s_equal_D.off disables .gate_D_S.c_open;
  requirement invariant s_equal_U.off disables .gate_U_N.c_open;
  requirement invariant s_equal_U.off disables .gate_U_S.c_open;
  requirement invariant culvert_N.S.flow or culvert_N.A.open or culvert_S.S.flow or culvert_S.A.open disables .gate_D_N.c_open;
  requirement invariant culvert_N.S.flow or culvert_N.A.open or culvert_S.S.flow or culvert_S.A.open disables .gate_D_S.c_open;
  requirement invariant not pad_N.S1.closed or not pad_N.S2.closed or not pad_N.S3.closed or pad_N.A.opening or not pad_S.S1.closed or not pad_S.S2.closed or not pad_S.S3.closed or pad_S.A.opening disables .gate_U_N.c_open;
  requirement invariant not pad_N.S1.closed or not pad_N.S2.closed or not pad_N.S3.closed or pad_N.A.opening or not pad_S.S1.closed or not pad_S.S2.closed or not pad_S.S3.closed or pad_S.A.opening disables .gate_U_S.c_open;
  requirement invariant not gate_U_N.S.closed or gate_U_N.Dir.opening or not gate_U_S.S.closed or gate_U_S.Dir.opening disables .gate_D_N.c_open;
  requirement invariant not gate_U_N.S.closed or gate_U_N.Dir.opening or not gate_U_S.S.closed or gate_U_S.Dir.opening disables .gate_D_S.c_open;
  requirement invariant not gate_D_N.S.closed or gate_D_N.Dir.opening or not gate_D_S.S.closed or gate_D_S.Dir.opening disables .gate_U_N.c_open;
  requirement invariant not gate_D_N.S.closed or gate_D_N.Dir.opening or not gate_D_S.S.closed or gate_D_S.Dir.opening disables .gate_U_S.c_open;
  requirement invariant out_D_N.S.green or out_D_N.A.green or out_D_S.S.green or out_D_S.A.green disables .in_D_N.c_green;
  requirement invariant out_D_N.S.green or out_D_N.A.green or out_D_S.S.green or out_D_S.A.green disables .in_D_S.c_green;
  requirement invariant out_U_N.S.green or out_U_N.A.green or out_U_S.S.green or out_U_S.A.green disables .in_U_N.c_green;
  requirement invariant out_U_N.S.green or out_U_N.A.green or out_U_S.S.green or out_U_S.A.green disables .in_U_S.c_green;
  requirement invariant in_D_N.S.green or in_D_N.A.green or in_D_S.S.green or in_D_S.A.green disables .out_D_N.c_green;
  requirement invariant in_D_N.S.green or in_D_N.A.green or in_D_S.S.green or in_D_S.A.green disables .out_D_S.c_green;
  requirement invariant in_U_N.S.green or in_U_N.A.green or in_U_S.S.green or in_U_S.A.green disables .out_U_N.c_green;
  requirement invariant in_U_N.S.green or in_U_N.A.green or in_U_S.S.green or in_U_S.A.green disables .out_U_S.c_green;
  requirement invariant not gate_D_N.S.open or gate_D_N.Dir.closing or not gate_D_S.S.open or gate_D_S.Dir.closing disables .in_D_N.c_green;
  requirement invariant not gate_D_N.S.open or gate_D_N.Dir.closing or not gate_D_S.S.open or gate_D_S.Dir.closing disables .in_D_S.c_green;
  requirement invariant not gate_U_N.S.open or gate_U_N.Dir.closing or not gate_U_S.S.open or gate_U_S.Dir.closing disables .in_U_N.c_green;
  requirement invariant not gate_U_N.S.open or gate_U_N.Dir.closing or not gate_U_S.S.open or gate_U_S.Dir.closing disables .in_U_S.c_green;
  requirement invariant not(in_D_N.S.red or in_D_N.S.redred) or not(in_D_N.A.red or in_D_N.A.redred) or not(in_D_S.S.red or in_D_S.S.redred) or not(in_D_S.A.red or in_D_S.A.redred) disables .gate_D_N.c_close;
  requirement invariant not(in_D_N.S.red or in_D_N.S.redred) or not(in_D_N.A.red or in_D_N.A.redred) or not(in_D_S.S.red or in_D_S.S.redred) or not(in_D_S.A.red or in_D_S.A.redred) disables .gate_D_S.c_close;
  requirement invariant not(in_U_N.S.red or in_U_N.S.redred) or not(in_U_N.A.red or in_U_N.A.redred) or not(in_U_S.S.red or in_U_S.S.redred) or not(in_U_S.A.red or in_U_S.A.redred) disables .gate_U_N.c_close;
  requirement invariant not(in_U_N.S.red or in_U_N.S.redred) or not(in_U_N.A.red or in_U_N.A.redred) or not(in_U_S.S.red or in_U_S.S.redred) or not(in_U_S.A.red or in_U_S.A.redred) disables .gate_U_S.c_close;
  requirement invariant not out_D_N.S.red or not out_D_N.A.red or not out_D_S.S.red or not out_D_S.A.red disables .gate_D_N.c_close;
  requirement invariant not out_D_N.S.red or not out_D_N.A.red or not out_D_S.S.red or not out_D_S.A.red disables .gate_D_S.c_close;
  requirement invariant not out_U_N.S.red or not out_U_N.A.red or not out_U_S.S.red or not out_U_S.A.red disables .gate_U_N.c_close;
  requirement invariant not out_U_N.S.red or not out_U_N.A.red or not out_U_S.S.red or not out_U_S.A.red disables .gate_U_S.c_close;
  requirement invariant not gate_D_N.S.open or gate_D_N.Dir.closing or not gate_D_S.S.open or gate_D_S.Dir.closing disables .out_D_N.c_green;
  requirement invariant not gate_D_N.S.open or gate_D_N.Dir.closing or not gate_D_S.S.open or gate_D_S.Dir.closing disables .out_D_S.c_green;
  requirement invariant not gate_U_N.S.open or gate_U_N.Dir.closing or not gate_U_S.S.open or gate_U_S.Dir.closing disables .out_U_N.c_green;
  requirement invariant not gate_U_N.S.open or gate_U_N.Dir.closing or not gate_U_S.S.open or gate_U_S.Dir.closing disables .out_U_S.c_green;
end
