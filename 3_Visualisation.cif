svgfile "4_Lock.svg";
import  "2_Simulation.cif";

//Used to represent actuator and sensor PLC status.
group def PLCcontact(alg string svgID; alg bool enabled):
    svgout id svgID attr "fill" value if enabled: "green" else "red" end;
end

//Used to represent the buttons + input to supervisor.
group def buttonvis(alg string svgID; alg bool pushed; event push_event, release_event):
    svgin  id svgID event if pushed: release_event else push_event end;
    svgout id svgID attr "fill" value if pushed: "yellowgreen" else "indianred" end;
end

//Used to represent the signs lamps and sensor PLC status.
group def signlamp(alg string svgIDPLC; alg bool enabled; alg string svgIDlamp, color):
    svgout id svgIDPLC  attr "fill" value if enabled: "green" else "red" end;
    svgout id svgIDlamp attr "fill" value if enabled:  color  else "grey" end;
end

//Represent the progression bars for the gates and paddle
svgout id "prog_gateD"  attr "width" value scale(gate_D_N.S.degree, 0, 45, 0.01, 100);
svgout id "prog_gateU"  attr "width" value scale(gate_U_N.S.degree, 0, 45, 0.01, 100);
svgout id "prog_paddle" attr "width" value scale(pad_S.S3.ext, 0, 10, 0.01, 100);

//Used to represent the gates
//A closed gate is black, an open gate is green, if the gate is in between positions it is yellow-green.
group svggate:
    svgout id "gateD" attr "fill" value if gate_D_N.S.closed : "black"
                                        elif gate_D_N.S.open : "green"
                                        else "yellowgreen" end;
end

group svggate2:
    svgout id "gateU" attr "fill" value if gate_U_N.S.closed : "black"
                                        elif gate_U_N.S.open : "green"
                                        else "yellowgreen" end;
end

group def paddles(alg string svgID; alg bool enabled):
    svgout id svgID attr "fill" value if enabled: "white" else "black" end;
end

//Button visualisation
knop1  : buttonvis("button1",   button1.o,  button1.u_push,  button1.u_release);
knop2  : buttonvis("button2",   button2.o,  button2.u_push,  button2.u_release);
knop3  : buttonvis("button3",   button3.o,  button3.u_push,  button3.u_release);
knop4  : buttonvis("button4",   button4.o,  button4.u_push,  button4.u_release);
knop5  : buttonvis("button5",   button5.o,  button5.u_push,  button5.u_release);
knop6  : buttonvis("button6",   button6.o,  button6.u_push,  button6.u_release);
knop7  : buttonvis("button7",   button7.o,  button7.u_push,  button7.u_release);
knop8  : buttonvis("button8",   button8.o,  button8.u_push,  button8.u_release);
knop9  : buttonvis("button9",   button9.o,  button9.u_push,  button9.u_release);
knop10 : buttonvis("button10",  button10.o, button10.u_push, button10.u_release);
knop11 : buttonvis("button11",  button11.o, button11.u_push, button11.u_release);
knop12 : buttonvis("button12",  button12.o, button12.u_push, button12.u_release);
knop13 : buttonvis("button13",  button13.o, button13.u_push, button13.u_release);
knop14 : buttonvis("button14",  button14.o, button14.u_push, button14.u_release);
knop15 : buttonvis("button15",  button15.o, button15.u_push, button15.u_release);
knop16 : buttonvis("button16",  button16.o, button16.u_push, button16.u_release);
knop17 : buttonvis("button17",  button17.o, button17.u_push, button17.u_release);
knop18 : buttonvis("button18",  button18.o, button18.u_push, button18.u_release);
knop19 : buttonvis("button19",  button19.o, button19.u_push, button19.u_release);
knop20 : buttonvis("button20",  button20.o, button20.u_push, button20.u_release);
knop25 : buttonvis("emergency", emergencystop.o, emergencystop.u_push, emergencystop.u_release);
knop26 : buttonvis("stop1",     stop1.o, stop1.u_push, stop1.u_release);
knop27 : buttonvis("stop2",     stop2.o, stop2.u_push, stop2.u_release);
knop28 : buttonvis("stop3",     stop3.o, stop3.u_push, stop3.u_release);
knop29 : buttonvis("stop4",     stop4.o, stop4.u_push, stop4.u_release);

//Paddle and culvert in Lock visualisation
paddlesD : paddles("paddleD", pad_N.S1.o);
CulvertU : paddles("paddleU", culvert_N.S.o);

//Outgoing sign actuator PLC contacts
outgoing1  : PLCcontact("a_outgoing_DN_r", out_D_N.A.r);
outgoing2  : PLCcontact("a_outgoing_DN_g", out_D_N.A.g);
outgoing3  : PLCcontact("a_outgoing_DS_r", out_D_S.A.r);
outgoing4  : PLCcontact("a_outgoing_DS_g", out_D_S.A.g);
outgoing5  : PLCcontact("a_outgoing_UN_r", out_U_N.A.r);
outgoing6  : PLCcontact("a_outgoing_UN_g", out_U_N.A.g);
outgoing7  : PLCcontact("a_outgoing_US_r", out_U_S.A.r);
outgoing8  : PLCcontact("a_outgoing_US_g", out_U_S.A.g);

//Outgoing sign Lock visualisation and sensor PLC contacts
outgoing9  : signlamp("s_outgoing_DN_r", out_D_N.S.r, "svg_outgoing_DN_r", "red");
outgoing10 : signlamp("s_outgoing_DN_g", out_D_N.S.g, "svg_outgoing_DN_g", "green");
outgoing11 : signlamp("s_outgoing_DS_r", out_D_S.S.r, "svg_outgoing_DS_r", "red");
outgoing12 : signlamp("s_outgoing_DS_g", out_D_S.S.g, "svg_outgoing_DS_g", "green");
outgoing13 : signlamp("s_outgoing_UN_r", out_U_N.S.r, "svg_outgoing_UN_r", "red");
outgoing14 : signlamp("s_outgoing_UN_g", out_U_N.S.g, "svg_outgoing_UN_g", "green");
outgoing15 : signlamp("s_outgoing_US_r", out_U_S.S.r, "svg_outgoing_US_r", "red");
outgoing16 : signlamp("s_outgoing_US_g", out_U_S.S.g, "svg_outgoing_US_g", "green");

//Incoming sign actuator PLC contacts
incoming1  : PLCcontact("a_incoming_DN_r", in_D_N.S.r);
incoming2  : PLCcontact("a_incoming_DN_g", in_D_N.S.g);
incoming3  : PLCcontact("a_incoming_DN_s", in_D_N.S.s);
incoming4  : PLCcontact("a_incoming_DS_r", in_D_S.S.r);
incoming5  : PLCcontact("a_incoming_DS_g", in_D_S.S.g);
incoming6  : PLCcontact("a_incoming_DS_s", in_D_S.S.s);
incoming7  : PLCcontact("a_incoming_UN_r", in_U_N.S.r);
incoming8  : PLCcontact("a_incoming_UN_g", in_U_N.S.g);
incoming9  : PLCcontact("a_incoming_UN_s", in_U_N.S.s);
incoming10 : PLCcontact("a_incoming_US_r", in_U_S.S.r);
incoming11 : PLCcontact("a_incoming_US_g", in_U_S.S.g);
incoming12 : PLCcontact("a_incoming_US_s", in_U_S.S.s);

//Incoming sign Lock visualisation and sensor PLC contacts
incoming13 : signlamp("s_incoming_DN_r", in_D_N.A.r, "svg_incoming_DN_r", "red");
incoming14 : signlamp("s_incoming_DN_g", in_D_N.A.g, "svg_incoming_DN_g", "green");
incoming15 : signlamp("s_incoming_DN_s", in_D_N.A.s, "svg_incoming_DN_s", "red");
incoming16 : signlamp("s_incoming_DS_r", in_D_S.A.r, "svg_incoming_DS_r", "red");
incoming17 : signlamp("s_incoming_DS_g", in_D_S.A.g, "svg_incoming_DS_g", "green");
incoming18 : signlamp("s_incoming_DS_s", in_D_S.A.s, "svg_incoming_DS_s", "red");
incoming19 : signlamp("s_incoming_UN_r", in_U_N.A.r, "svg_incoming_UN_r", "red");
incoming20 : signlamp("s_incoming_UN_g", in_U_N.A.g, "svg_incoming_UN_g", "green");
incoming21 : signlamp("s_incoming_UN_s", in_U_N.A.s, "svg_incoming_UN_s", "red");
incoming22 : signlamp("s_incoming_US_r", in_U_S.A.r, "svg_incoming_US_r", "red");
incoming23 : signlamp("s_incoming_US_g", in_U_S.A.g, "svg_incoming_US_g", "green");
incoming24 : signlamp("s_incoming_US_s", in_U_S.A.s, "svg_incoming_US_s", "red");

//Paddle PLC contacts
paddle1  : PLCcontact("s_paddle_1_N_o", pad_N.S1.o);
paddle2  : PLCcontact("s_paddle_1_N_d", pad_N.S1.c);
paddle3  : PLCcontact("s_paddle_2_N_o", pad_N.S2.o);
paddle4  : PLCcontact("s_paddle_2_N_d", pad_N.S2.c);
paddle5  : PLCcontact("s_paddle_3_N_o", pad_N.S3.o);
paddle6  : PLCcontact("s_paddle_3_N_d", pad_N.S3.c);
paddle7  : PLCcontact("s_paddle_1_S_o", pad_S.S1.o);
paddle8  : PLCcontact("s_paddle_1_S_d", pad_S.S1.c);
paddle9  : PLCcontact("s_paddle_2_S_o", pad_S.S2.o);
paddle10 : PLCcontact("s_paddle_2_S_d", pad_S.S2.c);
paddle11 : PLCcontact("s_paddle_3_S_o", pad_S.S3.o);
paddle12 : PLCcontact("s_paddle_3_S_d", pad_S.S3.c);
paddle13 : PLCcontact("a_paddle_N_o",   pad_N.A.o);
paddle14 : PLCcontact("a_paddle_N_d",   pad_N.A.c);
paddle15 : PLCcontact("a_paddle_S_o",   pad_S.A.o);
paddle16 : PLCcontact("a_paddle_S_d",   pad_S.A.c);

//Culvert PLC contacts
culvert1 : PLCcontact("a_culvert_N", culvert_N.A.c);
culvert2 : PLCcontact("a_culvert_S", culvert_S.A.c);
culvert3 : PLCcontact("s_culvert_N", culvert_N.S.o);
culvert4 : PLCcontact("s_culvert_S", culvert_S.S.o);

//Equal water PLC contacts
EqualWaterD : PLCcontact("s_equal_D", s_equal_D.o);
EqualWaterU : PLCcontact("s_equal_U", s_equal_U.o);

//Gate sensor PLC contacts
gate_sensor1  : PLCcontact("s_gate_DN_1", gate_D_N.S.c);
gate_sensor2  : PLCcontact("s_gate_DN_2", gate_D_N.S.bc);
gate_sensor3  : PLCcontact("s_gate_DN_3", gate_D_N.S.fc);
gate_sensor4  : PLCcontact("s_gate_DN_4", gate_D_N.S.fo);
gate_sensor5  : PLCcontact("s_gate_DN_5", gate_D_N.S.bo);
gate_sensor6  : PLCcontact("s_gate_DN_6", gate_D_N.S.o);
gate_sensor7  : PLCcontact("s_gate_DS_1", gate_D_S.S.c);
gate_sensor8  : PLCcontact("s_gate_DS_2", gate_D_S.S.bc);
gate_sensor9  : PLCcontact("s_gate_DS_3", gate_D_S.S.fc);
gate_sensor10 : PLCcontact("s_gate_DS_4", gate_D_S.S.fo);
gate_sensor11 : PLCcontact("s_gate_DS_5", gate_D_S.S.bo);
gate_sensor12 : PLCcontact("s_gate_DS_6", gate_D_S.S.o);
gate_sensor13 : PLCcontact("s_gate_UN_1", gate_U_N.S.c);
gate_sensor14 : PLCcontact("s_gate_UN_2", gate_U_N.S.bc);
gate_sensor15 : PLCcontact("s_gate_UN_3", gate_U_N.S.fc);
gate_sensor16 : PLCcontact("s_gate_UN_4", gate_U_N.S.fo);
gate_sensor17 : PLCcontact("s_gate_UN_5", gate_U_N.S.bo);
gate_sensor18 : PLCcontact("s_gate_UN_6", gate_U_N.S.o);
gate_sensor19 : PLCcontact("s_gate_US_1", gate_U_S.S.c);
gate_sensor20 : PLCcontact("s_gate_US_2", gate_U_S.S.bc);
gate_sensor21 : PLCcontact("s_gate_US_3", gate_U_S.S.fc);
gate_sensor22 : PLCcontact("s_gate_US_4", gate_U_S.S.fo);
gate_sensor23 : PLCcontact("s_gate_US_5", gate_U_S.S.bo);
gate_sensor24 : PLCcontact("s_gate_US_6", gate_U_S.S.o);

//Gate actuator PLC contacts
gate_actuator1 : PLCcontact("a_gate_DN_open",       gate_D_N.Dir.o);
gate_actuator2 : PLCcontact("a_gate_DN_close",      gate_D_N.Dir.c);
gate_actuator3 : PLCcontact("a_gate_DN_fast_open",  gate_D_N.Spe.fo);
gate_actuator4 : PLCcontact("a_gate_DN_slow_open",  gate_D_N.Spe.so);
gate_actuator5 : PLCcontact("a_gate_DN_fast_close", gate_D_N.Spe.fc);
gate_actuator6 : PLCcontact("a_gate_DN_slow_close", gate_D_N.Spe.sc);
gate_actuator7 : PLCcontact("a_gate_DN_high_pres",  gate_D_N.Pre.h);
gate_actuator8 : PLCcontact("a_gate_DN_low_pres",   gate_D_N.Pre.l);
gate_actuator9  : PLCcontact("a_gate_DS_open",       gate_D_S.Dir.o);
gate_actuator10 : PLCcontact("a_gate_DS_close",      gate_D_S.Dir.c);
gate_actuator11 : PLCcontact("a_gate_DS_fast_open",  gate_D_S.Spe.fo);
gate_actuator12 : PLCcontact("a_gate_DS_slow_open",  gate_D_S.Spe.so);
gate_actuator13 : PLCcontact("a_gate_DS_fast_close", gate_D_S.Spe.fc);
gate_actuator14 : PLCcontact("a_gate_DS_slow_close", gate_D_S.Spe.sc);
gate_actuator15 : PLCcontact("a_gate_DS_high_pres",  gate_D_S.Pre.h);
gate_actuator16 : PLCcontact("a_gate_DS_low_pres",   gate_D_S.Pre.l);
gate_actuator17 : PLCcontact("a_gate_UN_open",       gate_U_N.Dir.o);
gate_actuator18 : PLCcontact("a_gate_UN_close",      gate_U_N.Dir.c);
gate_actuator19 : PLCcontact("a_gate_UN_fast_open",  gate_U_N.Spe.fo);
gate_actuator20 : PLCcontact("a_gate_UN_slow_open",  gate_U_N.Spe.so);
gate_actuator21 : PLCcontact("a_gate_UN_fast_close", gate_U_N.Spe.fc);
gate_actuator22 : PLCcontact("a_gate_UN_slow_close", gate_U_N.Spe.sc);
gate_actuator23 : PLCcontact("a_gate_UN_high_pres",  gate_U_N.Pre.h);
gate_actuator24 : PLCcontact("a_gate_UN_low_pres",   gate_U_N.Pre.l);
gate_actuator25 : PLCcontact("a_gate_US_open",       gate_U_S.Dir.o);
gate_actuator26 : PLCcontact("a_gate_US_close",      gate_U_S.Dir.c);
gate_actuator27 : PLCcontact("a_gate_US_fast_open",  gate_U_S.Spe.fo);
gate_actuator28 : PLCcontact("a_gate_US_slow_open",  gate_U_S.Spe.so);
gate_actuator29 : PLCcontact("a_gate_US_fast_close", gate_U_S.Spe.fc);
gate_actuator30 : PLCcontact("a_gate_US_slow_close", gate_U_S.Spe.sc);
gate_actuator31 : PLCcontact("a_gate_US_high_pres",  gate_U_S.Pre.h);
gate_actuator32 : PLCcontact("a_gate_US_low_pres",   gate_U_S.Pre.l);
